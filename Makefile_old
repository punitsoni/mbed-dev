# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

GCC_BIN = /usr/bin/
PROJECT = main
OBJECTS = main.o 
OUT_DIR = out

.SECONDEXPANSION:

SYS_OBJECTS = $(wildcard ./mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_GCC_ARM/*.o)

INCLUDE_PATHS = -I. -I./mbed -I./mbed/TARGET_NUCLEO_F103RB -I./mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_GCC_ARM \
				-I./mbed/TARGET_/TARGET_STM -I./mbed/TARGET_NUCLEO_F103RB/TARGET_STM/TARGET_NUCLEO_F103RB

LIBRARY_PATHS = -L./mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_GCC_ARM 
LIBRARIES = -lmbed
LINKER_SCRIPT = ./mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_GCC_ARM/STM32F10X.ld

############################################################################### 
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy

CPU = -mcpu=cortex-m3 -mthumb
CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -Wall -fno-exceptions -ffunction-sections -fdata-sections 
CC_FLAGS += -MMD -MP
CC_SYMBOLS = -DTARGET_NUCLEO_F103RB -DTARGET_M3 -DTARGET_STM -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -D__CORTEX_M3 -DARM_MATH_CM3 -DMBED_BUILD_TIMESTAMP=1400548239.15 -D__MBED__=1

LD_FLAGS = -mcpu=cortex-m3 -mthumb -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float
LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

ifeq ($(DEBUG), 1)
  CC_FLAGS += -DDEBUG -O0
else
  CC_FLAGS += -DNDEBUG -Os
endif

all: $$(OUT_DIR)/.marker $(OUT_DIR)/$(PROJECT).bin
	@echo Done.

clean:
	rm -rf $(OUT_DIR)
#	rm -f $(PROJECT).bin $(PROJECT).elf $(OBJECTS) $(DEPS)

$(OUT_DIR)/%.o: %.s
	$(AS) $(CPU) -o $@ $<

$(OUT_DIR)/%.o: %.c
	@echo "[CC] $@"
	@$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

$(OUT_DIR)/%.o: %.cpp
	@printf "%-10s $@\n" [CPP]
	@$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 $(INCLUDE_PATHS) -o $@ $<

$(OUT_DIR)/$(PROJECT).elf: $(OUT_DIR)/$(OBJECTS) $(SYS_OBJECTS)
	@printf "%-10s $@\n" [LD]
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ \
		$(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)

$(OUT_DIR)/$(PROJECT).bin: $(OUT_DIR)/$(PROJECT).elf
	@printf "%-10s $@\n" [OBJCOPY]
	@$(OBJCOPY) -O binary $< $@

%/.marker:
	mkdir -p $(dir $@) 
	touch $@

.PRECIOUS: %/.marker

DEPS = $(OBJECTS:.o=.d) $(SYS_OBJECTS:.o=.d)
-include $(DEPS)
